<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0 (Python 3.10.4 on win32)" generated="20221114 17:47:39.222" rpa="false" schemaversion="3">
<suite id="s1" name="Abrandnewdeck Tc" source="C:\Users\higor_mesquita\Documents\HST\PDI\2º PDI\Deckofcards\tests\abrandnewdeck_tc.robot">
<kw name="Conexao com API" library="services" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>${alias}</arg>
<arg>${baseurl}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221114 17:47:39.344" level="INFO">Creating Session using : alias=deckofcards, url=http://deckofcardsapi.com/api/deck/, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221114 17:47:39.344" endtime="20221114 17:47:39.345"/>
</kw>
<status status="PASS" starttime="20221114 17:47:39.343" endtime="20221114 17:47:39.345"/>
</kw>
<test id="s1-t1" name="CT-01 - Validar a criação com sucesso de um novo deck de cartas" line="7">
<kw name="Dado que eu faça uma requisição GET na API Deck of Cards" library="steps">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>${alias}</arg>
<arg>url=${baseurl}new/</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20221114 17:47:40.059" level="INFO">GET Request : url=http://deckofcardsapi.com/api/deck/new/ (redirected) 
 path_url=/api/deck/new/ 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20221114 17:47:40.059" level="INFO">GET Response : url=https://deckofcardsapi.com/api/deck/new/ 
 status=200, reason=OK 
 headers={'Date': 'Mon, 14 Nov 2022 20:47:40 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'X-Content-Type-Options': 'nosniff', 'Referrer-Policy': 'same-origin', 'X-Frame-Options': 'DENY', 'Vary': 'Origin', 'CF-Cache-Status': 'DYNAMIC', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=48u1LzNuB%2Fa9YX4xzOvc0ryx2TvHqihYaPqRjg2%2BJjzO9nfPnqgmmcqGxg5QAhA9MOaLqPYxUNEZihhSj%2FrR9oacmarLjALh7eK9RyF7yoTAuEvC7aXf%2FluHyuVIG8niPXdfttM%3D"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '76a29a80fe0a6f91-JDO', 'Content-Encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400'} 
 body={"success": true, "deck_id": "4lwe1s3w4tnh", "remaining": 52, "shuffled": false} 
 </msg>
<msg timestamp="20221114 17:47:40.060" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20221114 17:47:39.346" endtime="20221114 17:47:40.060"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20221114 17:47:40.061" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20221114 17:47:40.060" endtime="20221114 17:47:40.061"/>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${remaining}</var>
<arg>${response.json()}</arg>
<arg>$.remaining</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20221114 17:47:40.082" level="INFO">${remaining} = [52]</msg>
<status status="PASS" starttime="20221114 17:47:40.061" endtime="20221114 17:47:40.082"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${remaining}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20221114 17:47:40.082" level="INFO">${remaining} = [52]</msg>
<status status="PASS" starttime="20221114 17:47:40.082" endtime="20221114 17:47:40.082"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${remaining}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221114 17:47:40.082" level="INFO">[52]</msg>
<status status="PASS" starttime="20221114 17:47:40.082" endtime="20221114 17:47:40.082"/>
</kw>
<status status="PASS" starttime="20221114 17:47:39.346" endtime="20221114 17:47:40.082"/>
</kw>
<kw name="Quando eu verificar que o response tem status &quot;200&quot; e &quot;OK&quot;" library="steps" sourcename="Quando eu verificar que o response tem status &quot;${sc}&quot; e &quot;${s}&quot;">
<kw name="Status Should Be" library="RequestsLibrary">
<arg>${sc}</arg>
<arg>${response}</arg>
<doc>Fails if response status code is different than the expected.</doc>
<status status="PASS" starttime="20221114 17:47:40.084" endtime="20221114 17:47:40.084"/>
</kw>
<status status="PASS" starttime="20221114 17:47:40.084" endtime="20221114 17:47:40.084"/>
</kw>
<kw name="Então devo ter sucesso nas respostas dos campos" library="steps">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.json()['success']}</arg>
<arg>${True}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20221114 17:47:40.085" endtime="20221114 17:47:40.085"/>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<arg>${response.json()['deck_id']}</arg>
<arg>12</arg>
<doc>Verifies that the length of the given item is correct.</doc>
<msg timestamp="20221114 17:47:40.086" level="INFO">Length is 12</msg>
<status status="PASS" starttime="20221114 17:47:40.085" endtime="20221114 17:47:40.086"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.json()['shuffled']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20221114 17:47:40.086" endtime="20221114 17:47:40.086"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221114 17:47:40.087" level="INFO">{'success': True, 'deck_id': '4lwe1s3w4tnh', 'remaining': 52, 'shuffled': False}</msg>
<status status="PASS" starttime="20221114 17:47:40.086" endtime="20221114 17:47:40.087"/>
</kw>
<status status="PASS" starttime="20221114 17:47:40.085" endtime="20221114 17:47:40.087"/>
</kw>
<kw name="E pegar o valor do campo deck_id" library="steps">
<kw name="Get Value From Json" library="JSONLibrary">
<var>${deck_id_new}</var>
<arg>${response.json()}</arg>
<arg>$.deck_id</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20221114 17:47:40.106" level="INFO">${deck_id_new} = ['4lwe1s3w4tnh']</msg>
<status status="PASS" starttime="20221114 17:47:40.087" endtime="20221114 17:47:40.106"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${deck_id_new}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20221114 17:47:40.106" level="INFO">${deck_id_new} = ['4lwe1s3w4tnh']</msg>
<status status="PASS" starttime="20221114 17:47:40.106" endtime="20221114 17:47:40.106"/>
</kw>
<status status="PASS" starttime="20221114 17:47:40.087" endtime="20221114 17:47:40.106"/>
</kw>
<status status="PASS" starttime="20221114 17:47:39.345" endtime="20221114 17:47:40.107"/>
</test>
<test id="s1-t2" name="CT-02 - Validar a criação sem sucesso de um novo deck de cartas" line="13">
<kw name="Dado que eu faça uma requisição GET na API Deck of Cards incorreta" library="steps">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>${alias}</arg>
<arg>url=${baseurl}old/</arg>
<arg>expected_status=404</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20221114 17:47:40.362" level="INFO">GET Request : url=http://deckofcardsapi.com/api/deck/old/ (redirected) 
 path_url=/api/deck/old/ 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20221114 17:47:40.362" level="INFO">GET Response : url=https://deckofcardsapi.com/api/deck/old/ 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 14 Nov 2022 20:47:40 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'X-Content-Type-Options': 'nosniff', 'Referrer-Policy': 'same-origin', 'X-Frame-Options': 'DENY', 'Vary': 'Origin', 'CF-Cache-Status': 'DYNAMIC', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=4J9hBhyD6JO7GluvOLZ4jLiH4VBOo6m7n4JVMCEHwin%2FLlD%2BfN70K5f0T%2FjkZlv0MyZk%2FmxVB3wvBw5V00DfoHk7tHVz%2FWJKuyYekD6TlUBAWVOAlQUijgurrpPHaZQ3N5Ute%2Bs%3D"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '76a29a847b5c6f91-JDO', 'Content-Encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400'} 
 body={"success": false, "error": "Deck ID does not exist."} 
 </msg>
<msg timestamp="20221114 17:47:40.362" level="INFO">${response} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20221114 17:47:40.111" endtime="20221114 17:47:40.362"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20221114 17:47:40.363" level="INFO">${response} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20221114 17:47:40.363" endtime="20221114 17:47:40.363"/>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${success}</var>
<arg>${response.json()}</arg>
<arg>$.success</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20221114 17:47:40.382" level="INFO">${success} = [False]</msg>
<status status="PASS" starttime="20221114 17:47:40.363" endtime="20221114 17:47:40.382"/>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${error}</var>
<arg>${response.json()}</arg>
<arg>$.error</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20221114 17:47:40.402" level="INFO">${error} = ['Deck ID does not exist.']</msg>
<status status="PASS" starttime="20221114 17:47:40.382" endtime="20221114 17:47:40.402"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${success}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20221114 17:47:40.402" level="INFO">${success} = [False]</msg>
<status status="PASS" starttime="20221114 17:47:40.402" endtime="20221114 17:47:40.402"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${error}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20221114 17:47:40.403" level="INFO">${error} = ['Deck ID does not exist.']</msg>
<status status="PASS" starttime="20221114 17:47:40.402" endtime="20221114 17:47:40.403"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${success}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221114 17:47:40.403" level="INFO">[False]</msg>
<status status="PASS" starttime="20221114 17:47:40.403" endtime="20221114 17:47:40.403"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${error}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221114 17:47:40.403" level="INFO">['Deck ID does not exist.']</msg>
<status status="PASS" starttime="20221114 17:47:40.403" endtime="20221114 17:47:40.403"/>
</kw>
<status status="PASS" starttime="20221114 17:47:40.110" endtime="20221114 17:47:40.403"/>
</kw>
<kw name="Quando eu verificar que o response tem status &quot;404&quot; e &quot;Not Found&quot;" library="steps" sourcename="Quando eu verificar que o response tem status &quot;${sc}&quot; e &quot;${s}&quot;">
<kw name="Status Should Be" library="RequestsLibrary">
<arg>${sc}</arg>
<arg>${response}</arg>
<doc>Fails if response status code is different than the expected.</doc>
<status status="PASS" starttime="20221114 17:47:40.404" endtime="20221114 17:47:40.404"/>
</kw>
<status status="PASS" starttime="20221114 17:47:40.404" endtime="20221114 17:47:40.405"/>
</kw>
<kw name="Então devo ter falha nas respostas dos campos" library="steps">
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.json()['success']}</arg>
<arg>${false}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20221114 17:47:40.405" endtime="20221114 17:47:40.406"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.json()['error']}</arg>
<arg>Deck ID does not exist.</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20221114 17:47:40.406" endtime="20221114 17:47:40.406"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221114 17:47:40.407" level="INFO">{'success': False, 'error': 'Deck ID does not exist.'}</msg>
<status status="PASS" starttime="20221114 17:47:40.407" endtime="20221114 17:47:40.407"/>
</kw>
<status status="PASS" starttime="20221114 17:47:40.405" endtime="20221114 17:47:40.407"/>
</kw>
<status status="PASS" starttime="20221114 17:47:40.109" endtime="20221114 17:47:40.408"/>
</test>
<doc>Esse arquivo contém os cenários de teste da API pública Deck of Cards</doc>
<status status="PASS" starttime="20221114 17:47:39.224" endtime="20221114 17:47:40.410"/>
</suite>
<statistics>
<total>
<stat pass="2" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="2" fail="0" skip="0" id="s1" name="Abrandnewdeck Tc">Abrandnewdeck Tc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
